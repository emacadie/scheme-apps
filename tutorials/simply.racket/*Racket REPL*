Welcome to Racket v6.9.
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
Calling my-append with listA: (get back) and listB: (the word) 
In else, with (car listB): get and (cdr listB): (word) 
Calling my-append with listA: (get back the) and listB: (word) 
In else, with (car listB): get and (cdr listB): () 
Calling my-append with listA: (get back the word) and listB: () 
Calling my-append with listA: (i am) and listB: (the walrus) 
In else, with (car listB): i and (cdr listB): (walrus) 
Calling my-append with listA: (i am the) and listB: (walrus) 
In else, with (car listB): i and (cdr listB): () 
Calling my-append with listA: (i am the walrus) and listB: () 
Calling my-append with listA: (Rod Argent) and listB: (Chris White) 
In else, with (car listB): Rod and (cdr listB): (White) 
Calling my-append with listA: (Rod Argent Chris) and listB: (White) 
In else, with (car listB): Rod and (cdr listB): () 
Calling my-append with listA: (Rod Argent Chris White) and listB: () 
Calling my-append with listA: (x) and listB: (y) 
In else, with (car listB): x and (cdr listB): () 
Calling my-append with listA: (x y) and listB: () 
Calling my-append with listA: (a) and listB: (b c d) 
In else, with (car listB): a and (cdr listB): (c d) 
Calling my-append with listA: (a b) and listB: (c d) 
In else, with (car listB): a and (cdr listB): (d) 
Calling my-append with listA: (a b c) and listB: (d) 
In else, with (car listB): a and (cdr listB): () 
Calling my-append with listA: (a b c d) and listB: () 
Calling my-append with listA: (a (b)) and listB: ((c)) 
In else, with (car listB): a and (cdr listB): () 
Calling my-append with listA: (a (b) (c)) and listB: () 
Calling my-append with listA: (a b) and listB: (c d) 
In else, with (car listB): a and (cdr listB): (d) 
Calling my-append with listA: (a b c) and listB: (d) 
In else, with (car listB): a and (cdr listB): () 
Calling my-append with listA: (a b c d) and listB: () 
Calling my-append with listA: () and listB: a 
Calling my-append with listA: (1 2 3) and listB: (4 5 (quote (10 11 12))) 
In else, with (car listB): 1 and (cdr listB): (5 (quote (10 11 12))) 
Calling my-append with listA: (1 2 3 4) and listB: (5 (quote (10 11 12))) 
In else, with (car listB): 1 and (cdr listB): ((quote (10 11 12))) 
Calling my-append with listA: (1 2 3 4 5) and listB: ((quote (10 11 12))) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 (quote (10 11 12))) and listB: () 
Calling my-append with listA: (1 2 3) and listB: (4 5 6) 
In else, with (car listB): 1 and (cdr listB): (5 6) 
Calling my-append with listA: (1 2 3 4) and listB: (5 6) 
In else, with (car listB): 1 and (cdr listB): (6) 
Calling my-append with listA: (1 2 3 4 5) and listB: (6) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 6) and listB: () 
Calling my-append with listA: (1 2 3 4 5 6) and listB: (7 8 9) 
In else, with (car listB): 1 and (cdr listB): (8 9) 
Calling my-append with listA: (1 2 3 4 5 6 7) and listB: (8 9) 
In else, with (car listB): 1 and (cdr listB): (9) 
Calling my-append with listA: (1 2 3 4 5 6 7 8) and listB: (9) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 6 7 8 9) and listB: () 
Calling my-append with listA: (1 2 3) and listB: (4 5 6) 
In else, with (car listB): 1 and (cdr listB): (5 6) 
Calling my-append with listA: (1 2 3 4) and listB: (5 6) 
In else, with (car listB): 1 and (cdr listB): (6) 
Calling my-append with listA: (1 2 3 4 5) and listB: (6) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 6) and listB: () 
Calling my-append with listA: (1 2 3 4 5 6) and listB: (7 8 9) 
In else, with (car listB): 1 and (cdr listB): (8 9) 
Calling my-append with listA: (1 2 3 4 5 6 7) and listB: (8 9) 
In else, with (car listB): 1 and (cdr listB): (9) 
Calling my-append with listA: (1 2 3 4 5 6 7 8) and listB: (9) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 6 7 8 9) and listB: () 
Calling my-append with listA: (1 2 3) and listB: 4 
listB is not a list: 4
Calling my-append with listA: (1 2 3 4) and listB: 5 
listB is not a list: 5
Calling my-append with listA: (1 2 3 4 5) and listB: 6 
listB is not a list: 6
Calling my-append with listA: (1 2 3 4 5 6) and listB: (7 8 9) 
In else, with (car listB): 1 and (cdr listB): (8 9) 
Calling my-append with listA: (1 2 3 4 5 6 7) and listB: (8 9) 
In else, with (car listB): 1 and (cdr listB): (9) 
Calling my-append with listA: (1 2 3 4 5 6 7 8) and listB: (9) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 6 7 8 9) and listB: () 
calling multi-sentence-append with list-a: hello and list-b: (there bug guy) 
in else: (car list-b) is there and (cdr list-b) is (bug guy) 
calling multi-sentence-append with list-a: (hello there) and list-b: ((bug guy)) 
in else: (car list-b) is (bug guy) and (cdr list-b) is () 
calling multi-sentence-append with list-a: (hello there bug guy) and list-b: (()) 
calling multi-sentence-append with list-a: (hello there) and list-b: (bug guy) 
in else: (car list-b) is bug and (cdr list-b) is (guy) 
calling multi-sentence-append with list-a: (hello there bug) and list-b: ((guy)) 
in else: (car list-b) is (guy) and (cdr list-b) is () 
calling multi-sentence-append with list-a: (hello there bug guy) and list-b: (()) 
chapter17.rkt/test> (new-member 'd '(a b c d e f g))
'(d e f g)
chapter17.rkt/test> (new-member 'h '(a b c d e f g))
#f
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
Calling my-append with listA: (get back) and listB: (the word) 
In else, with (car listB): get and (cdr listB): (word) 
Calling my-append with listA: (get back the) and listB: (word) 
In else, with (car listB): get and (cdr listB): () 
Calling my-append with listA: (get back the word) and listB: () 
Calling my-append with listA: (i am) and listB: (the walrus) 
In else, with (car listB): i and (cdr listB): (walrus) 
Calling my-append with listA: (i am the) and listB: (walrus) 
In else, with (car listB): i and (cdr listB): () 
Calling my-append with listA: (i am the walrus) and listB: () 
Calling my-append with listA: (Rod Argent) and listB: (Chris White) 
In else, with (car listB): Rod and (cdr listB): (White) 
Calling my-append with listA: (Rod Argent Chris) and listB: (White) 
In else, with (car listB): Rod and (cdr listB): () 
Calling my-append with listA: (Rod Argent Chris White) and listB: () 
Calling my-append with listA: (x) and listB: (y) 
In else, with (car listB): x and (cdr listB): () 
Calling my-append with listA: (x y) and listB: () 
Calling my-append with listA: (a) and listB: (b c d) 
In else, with (car listB): a and (cdr listB): (c d) 
Calling my-append with listA: (a b) and listB: (c d) 
In else, with (car listB): a and (cdr listB): (d) 
Calling my-append with listA: (a b c) and listB: (d) 
In else, with (car listB): a and (cdr listB): () 
Calling my-append with listA: (a b c d) and listB: () 
Calling my-append with listA: (a (b)) and listB: ((c)) 
In else, with (car listB): a and (cdr listB): () 
Calling my-append with listA: (a (b) (c)) and listB: () 
Calling my-append with listA: (a b) and listB: (c d) 
In else, with (car listB): a and (cdr listB): (d) 
Calling my-append with listA: (a b c) and listB: (d) 
In else, with (car listB): a and (cdr listB): () 
Calling my-append with listA: (a b c d) and listB: () 
Calling my-append with listA: () and listB: a 
Calling my-append with listA: (1 2 3) and listB: (4 5 (quote (10 11 12))) 
In else, with (car listB): 1 and (cdr listB): (5 (quote (10 11 12))) 
Calling my-append with listA: (1 2 3 4) and listB: (5 (quote (10 11 12))) 
In else, with (car listB): 1 and (cdr listB): ((quote (10 11 12))) 
Calling my-append with listA: (1 2 3 4 5) and listB: ((quote (10 11 12))) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 (quote (10 11 12))) and listB: () 
Calling my-append with listA: (1 2 3) and listB: (4 5 6) 
In else, with (car listB): 1 and (cdr listB): (5 6) 
Calling my-append with listA: (1 2 3 4) and listB: (5 6) 
In else, with (car listB): 1 and (cdr listB): (6) 
Calling my-append with listA: (1 2 3 4 5) and listB: (6) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 6) and listB: () 
Calling my-append with listA: (1 2 3 4 5 6) and listB: (7 8 9) 
In else, with (car listB): 1 and (cdr listB): (8 9) 
Calling my-append with listA: (1 2 3 4 5 6 7) and listB: (8 9) 
In else, with (car listB): 1 and (cdr listB): (9) 
Calling my-append with listA: (1 2 3 4 5 6 7 8) and listB: (9) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 6 7 8 9) and listB: () 
Calling my-append with listA: (1 2 3) and listB: (4 5 6) 
In else, with (car listB): 1 and (cdr listB): (5 6) 
Calling my-append with listA: (1 2 3 4) and listB: (5 6) 
In else, with (car listB): 1 and (cdr listB): (6) 
Calling my-append with listA: (1 2 3 4 5) and listB: (6) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 6) and listB: () 
Calling my-append with listA: (1 2 3 4 5 6) and listB: (7 8 9) 
In else, with (car listB): 1 and (cdr listB): (8 9) 
Calling my-append with listA: (1 2 3 4 5 6 7) and listB: (8 9) 
In else, with (car listB): 1 and (cdr listB): (9) 
Calling my-append with listA: (1 2 3 4 5 6 7 8) and listB: (9) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 6 7 8 9) and listB: () 
Calling my-append with listA: (1 2 3) and listB: 4 
listB is not a list: 4
Calling my-append with listA: (1 2 3 4) and listB: 5 
listB is not a list: 5
Calling my-append with listA: (1 2 3 4 5) and listB: 6 
listB is not a list: 6
Calling my-append with listA: (1 2 3 4 5 6) and listB: (7 8 9) 
In else, with (car listB): 1 and (cdr listB): (8 9) 
Calling my-append with listA: (1 2 3 4 5 6 7) and listB: (8 9) 
In else, with (car listB): 1 and (cdr listB): (9) 
Calling my-append with listA: (1 2 3 4 5 6 7 8) and listB: (9) 
In else, with (car listB): 1 and (cdr listB): () 
Calling my-append with listA: (1 2 3 4 5 6 7 8 9) and listB: () 
chapter17.rkt/test> (simply-member 'h '(a b c d e f g))
#f
chapter17.rkt/test> (simply-member 'd '(a b c d e f g))
'(d e f g)
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> (list-ref '(want to suck cock) 3)
'cock
chapter17.rkt/test> (list-ref '(want to suck cock) 4)
; list-ref: index too large for list
;   index: 4
;   in: '(want to suck cock)
chapter17.rkt/test> (list-ref '(i want to suck cock) 4)
'cock
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> (my-list-ref '(i want to suck cock) 4)
'cock
chapter17.rkt/test> (my-list-ref '(want to suck cock) 4)
#f
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
--------------------
FAILURE
name:       check-equal?
location:   chapter17.rkt:212:15
actual:     c
expected:   best
expression: (check-equal? result their-append-rsl)

--------------------
--------------------
FAILURE
name:       check-equal?
location:   chapter17.rkt:213:15
actual:     c
expected:   best
expression: (check-equal? result my-append-rsl)

--------------------
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> 
'(is chapter 17 lists)
(f1 '(a b c) '(d e f)): ((b c . d)) 
(f2 '(a b c) '(d e f)): ((b c) . e) 
(f3 '(a b c) '(d e f)): (a b c a b c) 
(f4 '(a b c) '(d e f)): ((a d) (b c e f)) 
(mystery '(1 2 3 4)): (4 3 2 1) 
chapter17.rkt/test> reduce
#<procedure:reduce>
chapter17.rkt/test> (count (car '(1 2 3)))
1
chapter17.rkt/test> (count (car '('(4 5 6) 1 2 3)))
2
chapter17.rkt/test> (reduce + 0 '(1 2 3 4))
; reduce: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 2
;   given: 3
;   arguments...:
;    #<procedure:...imply-scheme.rkt:1336:17>
;    0
;    '(1 2 3 4)
chapter17.rkt/test> (reduce +  '(1 2 3 4))
10
chapter17.rkt/test> (map (lambda (n) 1) '(1 2 3 4))
'(1 1 1 1)
chapter17.rkt/test> (map (lambda (n) 1) '(1 2 3 4 '(1 2 3)))
'(1 1 1 1 1)
chapter17.rkt/test> 